package Eserver;import java.sql.*;import java.net.*;import java.io.*;import java.util.Enumeration;public class EServer{public static void main(String[] args){   // Net and IO objects   ServerSocket ss= null;   Socket s = null;   BufferedReader bf = null;   PrintWriter pw = null;   // Queries   // Query which retireves all products   String allQuery = "Select * from StoreProducts";   // Query which retrieves products which are out of stock   String outOfStockQuery = "Select * from StoreProducts where Quantity = 0";   String queryString = "";   String messageBack = "";   // Database objects   Connection cn = null;   Statement query = null;   ResultSet rs = null;   String lineRead= "";   ProductCollection pColl = new ProductCollection();   Enumeration pEnumeration;   try   {      // Server socket set up on port 2000      ss = new ServerSocket(2000);      System.out.println("...Server socket set up");      // Set up a database      //Database db = new Database      //  ("darrel", "", "sun.jdbc.odbc.JdbcOdbcDriver", "jdbc:odbc:", "products");            // Java 8 Code      Database db = new Database        ("darrel", "", "", "jdbc:ucanaccess:", "//ProductsExercise.mdb");      System.out.println("...Database set up");      // Get a connection to the database      Database.establishConnection();      cn = Database.getConnection();      System.out.println("...Database connection set up");      //Set up a query object      query = cn.createStatement();      // Loop waiting for connections      int count = 1;      while(true)      {         System.out.println("...Waiting for connection "+count);         count++;         s = ss.accept();         //Set up streams, the print writer must flush so use true as the second argument         pw = new PrintWriter(s.getOutputStream(), true);         bf = new BufferedReader(new InputStreamReader(s.getInputStream()));         // looper is used to terminate the loop when a client finishes         boolean looper = true;         while(true)         {             // Read a command from the client             lineRead = bf.readLine();             switch(lineRead.charAt(0))//             {                // Out of Stock command                case 'O':{                           queryString = outOfStockQuery;                           break;                         }                // All products                case 'A':{                           queryString = allQuery;                           break;                         }                // Client has terminated                case 'E':{                           looper = false;                           break;                          }                 }              //Check if client has terminated              if(!looper) break;              // Client has not terminated              // Execute the required query and create result set              rs = query.executeQuery(queryString);              // Create collection of products              pColl = new ProductCollection();              // Process the rows that have been extracted              // Place them in pColl              Product extractedProduct;              while(rs.next())              {                 // Extract out the contents of a row and set up a Product                 //object extractedProduct                String productID = rs.getString("ProductID");                String productName = rs.getString("ProductName");                int quantity = rs.getInt("Quantity");                int price = rs.getInt("Price");                extractedProduct = new Product(productID, productName, quantity, price);                 // Add the Product object to the collection of product objects pColl                 // Strictly no reason for doing this they can be sent                 // directly back to the client, I have done it to illustrate the                 // use of a business object		pColl.addProduct(extractedProduct);               }               // Form the collection of products, each terminated by asterisk               pEnumeration = pColl.elements();               // messageBack is to be concatenated to so initialise it to the empty string               messageBack= "";               while(pEnumeration.hasMoreElements())               {                  messageBack+=(Product)pEnumeration.nextElement()+"*";               }               // Now send back the collection string to the client for display               pw.println(messageBack);             }          }        }        catch(Exception e)           {System.out.println("Trouble setting up the database "+e);}        // Close database connection        try        {           cn.close();        }        catch(Exception e)            {System.out.println("Problem closing connection");}    }}