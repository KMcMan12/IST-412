package Eserver;import java.net.*;import java.io.*;import java.util.StringTokenizer;import java.awt.*;public class Eclient extends Frame{// Declarations for network access//private PrintWriter pw = null;private BufferedReader bf = null;private Socket s = null;// Code for method which sets up connectionprivate void setUpConnections(){   try   {      // Socket on port 200 of localhost      s = new Socket("127.0.0.1", 2000);      // Don't forget to auto flush second argument true      pw = new PrintWriter(s.getOutputStream(), true);      bf = new BufferedReader(new InputStreamReader(s.getInputStream()));   }   catch(Exception e)      {System.out.println("Trouble setting up connection"+e);}}// Code for closing connectionsprivate void closeConnections(){   try   {      pw.close();      bf.close();      s.close();   }   catch(Exception e)      {System.out.println("Problem closing down connections ");}}private void process(String line){   // Processes the string of product details. Each is terminated by an   // asterisk, so set up a string tokenizer   StringTokenizer st = new StringTokenizer(line, "*");   // process the reply, placing each substring terminated by * on the   // text area resultsArea   resultsArea.setText("");   while(st.hasMoreElements())      resultsArea.append(st.nextToken()+"\n");}public Eclient(){   setUpConnections();   setLayout(null);   setSize(442,328);   setVisible(false);   add(resultsArea);   resultsArea.setBounds(24,36,220,242);   outOfStockButton.setLabel("Out of stock");   add(outOfStockButton);   outOfStockButton.setBackground(java.awt.Color.lightGray);   outOfStockButton.setBounds(288,96,94,36);   itemsButton.setLabel("All items");   add(itemsButton);   itemsButton.setBackground(java.awt.Color.lightGray);   itemsButton.setBounds(288,36,94,36);   setTitle("Exercise 5.2");   SymWindow aSymWindow = new SymWindow();   this.addWindowListener(aSymWindow);   SymMouse aSymMouse = new SymMouse();   itemsButton.addMouseListener(aSymMouse);   outOfStockButton.addMouseListener(aSymMouse);}public Eclient(String title){   this();   setTitle(title);}public void setVisible(boolean b){   if(b)   {      setLocation(50, 50);   }   super.setVisible(b);}static public void main(String args[]){   (new Eclient()).setVisible(true);}public void addNotify(){   // Record the size of the window prior to calling parents addNotify.   Dimension d = getSize();   super.addNotify();   if (fComponentsAdjusted)      return;   // Adjust components according to the insets   Insets insets = getInsets();   setSize(insets.left + insets.right + d.width, insets.top + insets.bottom + d.height);   Component components[] = getComponents();   for (int i = 0; i < components.length; i++)   {      Point p = components[i].getLocation();      p.translate(insets.left, insets.top);      components[i].setLocation(p);   }   fComponentsAdjusted = true;}// Used for addNotify check.boolean fComponentsAdjusted = false;java.awt.TextArea resultsArea = new java.awt.TextArea();java.awt.Button outOfStockButton = new java.awt.Button();java.awt.Button itemsButton = new java.awt.Button();class SymWindow extends java.awt.event.WindowAdapter{   public void windowClosing(java.awt.event.WindowEvent event)   {      Object object = event.getSource();      if (object == Eclient.this)         Eclient_WindowClosing(event);   }}void Eclient_WindowClosing(java.awt.event.WindowEvent event){   setVisible(false);		 // hide the Frame   pw.println("E");   closeConnections();   System.exit(0);}class SymMouse extends java.awt.event.MouseAdapter{   public void mouseClicked(java.awt.event.MouseEvent event)   {   Object object = event.getSource();   if (object == itemsButton)      itemsButton_MouseClicked(event);   else if (object == outOfStockButton)      outOfStockButton_MouseClicked(event);   }}void itemsButton_MouseClicked(java.awt.event.MouseEvent event){   itemsButton_MouseClicked_Interaction1(event);}void itemsButton_MouseClicked_Interaction1(java.awt.event.MouseEvent event){   try   {      // Send A message to the server asking for all items      pw.println("A");      // Read reply      String rdString = bf.readLine();      // Process the string that has been sent back      process(rdString);   }   catch (Exception e) {}}void outOfStockButton_MouseClicked(java.awt.event.MouseEvent event){   outOfStockButton_MouseClicked_Interaction1(event);}void outOfStockButton_MouseClicked_Interaction1(java.awt.event.MouseEvent event){   try   {      // Send O message to the server asking for out of stock items      pw.println("O");      // Read reply      String rdString = bf.readLine();      // Process the string that has been sent back      process(rdString);   }   catch (Exception e) {}}}